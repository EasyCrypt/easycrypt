(* --------------------------------------------------------------------
 * Copyright (c) - 2012--2016 - IMDEA Software Institute
 * Copyright (c) - 2012--2021 - Inria
 * Copyright (c) - 2012--2021 - Ecole Polytechnique
 *
 * Distributed under the terms of the CeCILL-B-V1 license
 * -------------------------------------------------------------------- *)

require import AllCore Distr List FSet SmtMap.
require import Dexcepted.
require (*--*) PRP.
(*---*) import RField StdOrder.RealOrder.

require (*--*) FelTactic.

(** We assume a finite domain D, equipped with its uniform
    distribution. **)
type D.
op uD: { D distr | is_uniform uD /\ is_lossless uD /\ is_full uD } as uD_uf_fu.

(** and a type K equipped with a lossless distribution **)
type K.
op dK: { K distr | is_lossless dK } as dK_ll.

clone import PRP as PRPt with
  type D  <- D.

clone import StrongPRP as PRPSec.

clone import RP as PRPi with
    op dD <- uD
proof * by smt(uD_uf_fu)
rename "RP" as "PRPi".

(* This is an "Almost (Random Permutation)" (the Almost applies to Permutation) *)
(* We keep track of collisions explicitly because it's going to be useful anyway *)
module ARP = {
  var coll : bool
  var m, mi: (D,D) fmap

  proc init(): unit = {
    m    <- empty;
    mi   <- empty;
    coll <- false;
  }

  proc f(x : D) = {
    var y;

    if (x \notin m) {
      y      <$ uD;
      coll   <- coll \/ rng m y;
      m.[x]  <- y;
      mi.[y] <- x;
    }
    return oget m.[x];
  }

  proc fi(y : D) = {
    var x;

    if (y \notin mi) {
      x      <$ uD;
      coll   <- coll \/ rng mi x;
      m.[x]  <- y;
      mi.[y] <- x;
    }
    return oget mi.[y];
  }
}.

op q : { int | 0 <= q } as ge0_q.

(** To factor out the difficult step, we parameterize the PRP by a
    procedure that samples its output, and provide two instantiations
    of it. **)
module type Sample_t = {
  proc sample(X:D -> bool): D
}.

module Direct = {
  proc sample(X:D -> bool): D = {
    var r;

    r <$ uD \ X;
    return r;
  }
}.

module Indirect = {
  proc sample(X:D -> bool): D = {
    var r;

    r <$ uD;
    if (X r) {
      r <$ uD \ X;
    }
    return r;
  }
}.

module PRPi'(S:Sample_t) = {
  proc init =  PRPi.init

  proc f(x:D): D = {
    var r;
    if (x \notin PRPi.m) {
      r <@ S.sample(rng PRPi.m);
      PRPi.m.[x] <- r;
      PRPi.mi.[oget PRPi.m.[x]] <- x;
    }
    return oget PRPi.m.[x];
  }

  proc fi(x:D): D = {
    var r;
    if (x \notin PRPi.mi) {
      r <@ S.sample(rng PRPi.mi);
      PRPi.mi.[x] <- r;
      PRPi.m.[oget PRPi.mi.[x]] <- x;
    }
    return oget PRPi.mi.[x];
  }
}.

(* Some losslessness lemmas *)
(* FIXME: cleanup *)

(* FIXME: Duplicate lemmas with RP_RF *)
lemma nosmt notin_supportIP (P : 'a -> bool) (d : 'a distr):
  (exists a, support d a /\ !P a) <=> mu d P < mu d predT.
proof.
rewrite (mu_split _ predT P) /predI /predT /predC /=.
rewrite (exists_eq (fun a => support d a /\ !P a) (fun a => !P a /\ a \in d)) /=.
+ by move=> a /=; rewrite andbC.
by rewrite -(witness_support (predC P)) -/(predC _) /#.
qed.

lemma excepted_lossless (m:(D,D) fmap):
  (exists x, x \notin m) =>
  mu (uD \ (rng m)) predT = 1%r.
proof. 
move=> /endo_dom_rng [x h]; rewrite dexcepted_ll //.
+ smt w=uD_uf_fu.
have [?[<- @/is_full Hsupp]]:= uD_uf_fu.
apply/notin_supportIP;exists x => />;apply Hsupp.
qed.

phoare Indirect_ll: [Indirect.sample: exists x, support uD x /\ !X x ==> true] = 1%r.
proof.
proc; seq  1: (exists x, support uD x /\ !X x)=> //=.
+ by rnd (predT); skip; smt ml=0 w=uD_uf_fu.
if=> //=.
+ rnd (predT); skip.
  by progress [-split]; split=> //=; smt.
by hoare; rnd=> //=; skip=> &hr ->.
qed.

lemma PRPi'_Indirect_f_ll: islossless PRPi'(Indirect).f.
proof.
proc; if=> //=; auto; call Indirect_ll.
skip=> /> &hr x_notin_m.
have [x0] x0_notinr_m := endo_dom_rng PRPi.m{hr} _; first by exists x{hr}.
by exists x0; rewrite x0_notinr_m /=; smt w=uD_uf_fu.
qed.

lemma PRPi'_Indirect_fi_ll: islossless PRPi'(Indirect).fi.
proof.
proc; if=> //=; auto; call Indirect_ll.
skip=> /> &hr x_notin_mi.
have [x0] x0_notinr_mi := endo_dom_rng PRPi.mi{hr} _; first by exists x{hr}.
by exists x0; rewrite x0_notinr_mi; smt w=uD_uf_fu.
qed.

(** The proof is cut into 3 parts (sections):
      - We first focus on proving
         Pr[IND(PRPi'(Indirect),D).main() @ &m: res]
         <= Pr[IND(PRFi,D).main() @ &m: res]
          + Pr[IND(PRFi,D).main() @ &m: collision PRFi.m].
      - Second, we concretely bound (when the PRF oracle stops
        answering queries after the q-th):
          Pr[IND(PRFi,D).main() @ &m: collision PRFi.m]
          <= q^2 * Pr[x = $uD: x = witness]
      - We conclude by proving (difficult!)
         Pr[IND(PRPi,D).main() @ &m: res]
         = Pr[IND(PRPi'(Indirect),D).main() @ &m: res].

     Purists are then invited to turn the security statement about
     restricted oracles into a security statement about restricted
     adversaries. **)
section Upto.
  declare module D <: Distinguisher {PRPi, ARP}.
  declare axiom D_ll (O <: SPRP_Oracles {D}): islossless O.f => islossless O.fi => islossless D(O).distinguish.

  local module PRP_indirect_bad = {
    var bad : bool

    proc init(): unit = {
             PRPi.init();
      bad <- false;
    }

    proc sample(X:D -> bool): D = {
      var r;

      r <$ uD;
      if (X r) {
        bad <- true;
        r <$ uD \ X;
      }
      return r;
    }

    proc f(x:D): D = {
      var r;
      if (x \notin PRPi.m) {
        r <@ sample(rng PRPi.m);
        PRPi.m.[x] <- r;
        PRPi.mi.[oget PRPi.m.[x]] <- x;
      }
      return oget PRPi.m.[x];
    }

    proc fi(y:D): D = {
     var r;
     if (y \notin PRPi.mi) {
        r <@ sample(rng PRPi.mi);
        PRPi.mi.[y] <- r;
        PRPi.m.[oget PRPi.mi.[y]] <- y;
      }
      return oget PRPi.mi.[y];
    }
  }.

  local lemma PRPi'_Indirect_eq &m:
    Pr[IND(PRPi'(Indirect),D).main() @ &m: res]
    = Pr[IND(PRP_indirect_bad,D).main() @ &m: res].
  proof. by byequiv=> //=; proc; inline *; sim. qed.

  (** Upto failure: if a collision does not occur in PRFi.m, then the
      programs are equivalent **)
  lemma pr_PRPi'_Indirect_ARP &m:
    `|Pr[IND(PRPi'(Indirect),D).main() @ &m: res]
      - Pr[IND(ARP,D).main() @ &m: res]|
    <= Pr[IND(ARP,D).main() @ &m: ARP.coll].
  proof.
  rewrite (PRPi'_Indirect_eq &m).
  byequiv: PRP_indirect_bad.bad=> //=; 2:smt ml=0.
  proc.
  call (_: ARP.coll,
             !PRP_indirect_bad.bad{1} /\ ={m,mi}(PRPi,ARP),
             (PRP_indirect_bad.bad{1} <=> ARP.coll{2})).
  + exact D_ll.
  + proc. if=> //=; inline *.
    swap{1} 1.
    seq  1  4: (={x} /\
                x{1} \notin PRPi.m{1} /\
                ARP.m{2} = PRPi.m.[x <- r0]{1} /\
                ARP.mi{2} = PRPi.mi.[r0 <- x]{1} /\
                ((PRP_indirect_bad.bad \/ rng PRPi.m r0){1} <=> ARP.coll{2})).
      by auto=> /#.
    sp; if{1}.
      conseq (_: PRP_indirect_bad.bad{1} /\ ARP.coll{2})=> //=.
      auto; progress [-split]; split=> //= [|_]; 1:smt.
      by progress; right.
    by auto; progress [-split]; rewrite H0 /= => -> /=; rewrite get_setE.
  + move=> &2 bad; conseq (_: true ==> true: =1%r)
                          (_: PRP_indirect_bad.bad ==> PRP_indirect_bad.bad)=> //=.
      by proc; if=> //=; inline *; seq  2: PRP_indirect_bad.bad; [auto|if=> //=; auto].
    proc; if=> //=; inline *.
    seq  2: (X = rng PRPi.m /\ x \notin PRPi.m) 1%r 1%r 0%r _ => //=.
      by auto; rewrite -/predT; smt ml=0 w=uD_uf_fu. (* predT should be an abbreviation *)
      by if=> //=; auto; smt.
      by hoare; auto.
  + move=> &1.
    proc; if; auto; progress [-split]; rewrite -/predT; split=> //= [|_]; 1:smt ml=0 w=uD_uf_fu.
    by progress [-split]; rewrite H.
  + proc. if=> //=; inline *.
    swap{1} 1.
    seq  1  4: (={y} /\
                y{1} \notin PRPi.mi{1} /\
                ARP.m{2} = PRPi.m.[r0 <- y]{1} /\
                ARP.mi{2} = PRPi.mi.[y <- r0]{1} /\
                ((PRP_indirect_bad.bad \/ rng PRPi.mi r0){1} <=> ARP.coll{2})).
      by auto=> /#.
    sp; if{1}.
      conseq (_: PRP_indirect_bad.bad{1} /\ ARP.coll{2})=> //=.
      auto; progress [-split]; split=> //= [|_]; 1:smt.
      by progress; right.
    by auto; progress [-split]; rewrite H0 => /= ->; rewrite get_setE.
  + move=> &2 bad; conseq (_: true ==> true: =1%r)
                          (_: PRP_indirect_bad.bad ==> PRP_indirect_bad.bad)=> //=.
      by proc; if=> //=; inline *; seq  2: PRP_indirect_bad.bad; [auto|if=> //=; auto].
    proc; if=> //=; inline *.
    seq  2: (X = rng PRPi.mi /\ y \notin PRPi.mi) 1%r 1%r 0%r _ => //=.
      by auto; rewrite -/predT; smt ml=0 w=uD_uf_fu. (* predT should be an abbreviation *)
      by if=> //=; auto; smt.
      by hoare; auto.
  + move=> &1.
    proc; if; auto; progress [-split]; rewrite -/predT; split=> //= [|_]; 1:smt ml=0 w=uD_uf_fu.
    by progress [-split]; rewrite H.
  by inline *; auto; progress; smt.
  qed.
end section Upto.

(** We now bound the probability of collisions. We cannot do so
    by instantiating the generic Birthday Bound result. It's still
    the Birthday Bound, though, just not generic:
      Pr[IND(ARP,DBounder(D)).main() @ &m: ARP.coll]
      <= q^2 * Pr[x = $uD: x = witness],

    where DBounder prevents the distinguisher from calling the
    f-oracle more than q times. **)
module DBounder (D : Distinguisher) (F : SPRP_Oracles) = {
  module FBounder = {
    var c:int

    proc f(x:D): D = {
      var r <- witness;

      if (c < q) {
        r <@ F.f(x);
        c <- c + 1;
      }
      return r;
    }

    proc fi(x:D): D = {
      var r <- witness;

      if (c < q) {
        r <@ F.fi(x);
        c <- c + 1;
      }
      return r;
    }
  }

  proc distinguish(): bool = {
    var b;

    FBounder.c <- 0;
    b          <@ D(FBounder).distinguish();
    return b;
  }
}.

section CollisionProbability.
  require import Mu_mem.
  (*---*) import StdBigop StdRing StdOrder.
  (*---*) import Bigreal.BRA RField RField.AddMonoid IntOrder.

  declare module D <: Distinguisher {ARP, DBounder}.
  declare axiom D_ll (O <: SPRP_Oracles {D}): islossless O.f => islossless O.fi => islossless D(O).distinguish.

  local module FEL (D : Distinguisher) = {
    var c : int

    module FBounder = {
      proc f(x:D): D = {
        var r <- witness;

        if (c < q) {
          if (card (frng ARP.m) < q) {
            r <@ ARP.f(x);
          }
          c <- c + 1;
        }
        return r;
      }

      proc fi(x:D): D = {
        var r <- witness;

        if (c < q) {
          if (card (frng ARP.mi) < q) {
            r <@ ARP.fi(x);
          }
          c <- c + 1;
        }
        return r;
      }
    }

    proc main(): bool = {
      var b : bool;

           ARP.init();
      c <- 0;
      b <@ D(FBounder).distinguish();
      return b;
    }
  }.

  lemma pr_PRFi_collision &m:
    Pr[IND(ARP,DBounder(D)).main() @ &m: ARP.coll]
    <= (q^2 - q)%r / 2%r * mu uD (pred1 witness).
  proof.
  have ->: Pr[IND(ARP,DBounder(D)).main() @ &m: ARP.coll]
           = Pr[IND(ARP,DBounder(D)).main() @ &m: ARP.coll /\ DBounder.FBounder.c <= q].
  + byequiv=> //=; conseq (_: ={glob D} ==> ={ARP.coll,DBounder.FBounder.c})
                          (_: true ==> DBounder.FBounder.c <= q)=> //=.
    * proc; inline *; wp; call (_: DBounder.FBounder.c <= q).
      - by proc; sp; if=> //=; inline*; sp; if=> //=; auto=> /#.
      - by proc; sp; if=> //=; inline*; sp; if=> //=; auto=> /#.
      by auto=> /=; apply/ge0_q.
    by sim.
  have ->: Pr[IND(ARP,DBounder(D)).main() @ &m: ARP.coll /\ DBounder.FBounder.c <= q]
           = Pr[FEL(D).main() @ &m: ARP.coll /\ FEL.c <= q].
  + byequiv=> //=; proc; inline *; wp.
    call (_: ={glob ARP} /\ ={c}(DBounder.FBounder,FEL) /\ card (frng ARP.m){1} <= FEL.c{2} /\ card (frng ARP.mi){1} <= FEL.c{2}).
    * proc; sp; if=> //=. rcondt{2} 1; first by auto=> /#.
      inline *; sp; if=> //=; auto.
      - progress.
        + apply/(ler_trans (card (frng ARP.m{2} `|` fset1 yL))).
            apply/subset_leq_fcard=> x'; rewrite !inE !mem_frng !rngE=> - /= [x0].
            rewrite get_setE; case: (x0 = x{2})=> [<<- /= ->|_ mx0] //.
            by left; exists x0.
          smt.
        + apply/(ler_trans (card (frng ARP.mi{2} `|` fset1 x{2}))).
            apply/subset_leq_fcard=> x'; rewrite !inE !mem_frng !rngE=> - /= [x0].
            rewrite get_setE; case: (x0 = yL)=> [<<- //|_ mx0].
            by left; exists x0.
          smt.
      - smt ml=0.
    * proc; sp; if=> //=. rcondt{2} 1; first by auto=> /#.
      inline *; sp; if=> //=; auto.
      - progress.
        + apply/(ler_trans (card (frng ARP.m{2} `|` fset1 x{2}))).
            apply/subset_leq_fcard=> x'; rewrite !inE !mem_frng !rngE=> - /= [x0].
            rewrite get_setE; case: (x0 = x0L)=> [<<- //|_ mx0].
            by left; exists x0.
          smt.
        + apply/(ler_trans (card (frng ARP.mi{2} `|` fset1 x0L))).
            apply/subset_leq_fcard=> x'; rewrite !inE !mem_frng !rngE=> - /= [x0].
            rewrite get_setE; case: (x0 = x{2})=> [<<- //|_ mx0].
            by left; exists x0.
          smt.
      - smt ml=0.
    by auto=> />; rewrite frng0 fcards0.
  fel 2 FEL.c (fun x, x%r * mu uD (pred1 witness)) q (ARP.coll) 
           [FEL(D).FBounder.f: (FEL.c < q); FEL(D).FBounder.fi: (FEL.c < q)]
           (card (fdom ARP.m) <= FEL.c /\ card (fdom ARP.mi) <= FEL.c)=> //.
  + rewrite -mulr_suml Bigreal.sumidE 1:ge0_q. 
    by rewrite expr2;smt(mu_bounded ge0_q).
  + by inline*; auto=> />; rewrite fdom0 fcards0.
  + exists*FEL.c;elim*=> c.
    conseq(:_==>_ : (c%r * mu1 uD witness))=> />.
    proc; sp; rcondt 1=> //.
    inline *; sp; if=> //=; last first.
    * hoare; auto=> // /> &hr 6?.
      by apply/RealOrder.mulr_ge0; smt w=(mu_bounded ge0_q).
    sp; if=> //=.
    * wp; rnd (rng ARP.m); skip.
      progress.
      - apply/(RealOrder.ler_trans ((card (frng ARP.m{hr}))%r * mu uD (pred1 witness))).
        have ->: rng ARP.m{hr} = mem (frng ARP.m{hr}).
        + by apply/fun_ext=> x; rewrite mem_frng.
        apply/mu_mem_le; move=> x _; have [] uD_suf [] ? uD_fu:= uD_uf_fu.
        apply/RealOrder.lerr_eq/uD_suf; 1,2:rewrite uD_fu //.
        by apply/RealOrder.ler_wpmul2r; smt w=(mu_bounded lt_fromint ltrW leq_card_rng_dom).
      - by move: H9;rewrite H1.
    * by hoare; auto=> //=; smt w=(RealOrder.mulr_ge0 mu_bounded ge0_q).
  + move=> c; proc. rcondt 2; 1:by auto.
    sp; if=> //=.
    * inline*;sp;if;auto; 2:smt().
      move=> &hr /> + + + + + y />.
      by rewrite !fdom_set !fcardU !fcard1; smt(fcard_ge0).
    * by auto=> /#.
  + by move=> b c; proc; rcondf 2; auto.
  + exists*FEL.c;elim*=> c.
    conseq(:_==>_ : (c%r * mu1 uD witness));progress.
    proc; sp; rcondt 1=> //=.
    inline *; sp; if=> //=; last by hoare; auto; smt w=(RealOrder.mulr_ge0 mu_bounded ge0_q).
    sp; if=> //=.
    * wp; rnd (rng ARP.mi); skip.
      progress.
      - apply/(RealOrder.ler_trans ((card (frng ARP.mi{hr}))%r * mu uD (pred1 witness))).
        have ->: rng ARP.mi{hr} = mem (frng ARP.mi{hr}).
        + by apply/fun_ext=> x; rewrite mem_frng.
        apply/mu_mem_le; move=> x _; have [] uD_suf [] _ uD_fu:= uD_uf_fu.
        apply/RealOrder.lerr_eq/uD_suf; 1,2:rewrite uD_fu //.
        smt w=(RealOrder.ler_wpmul2r mu_bounded le_fromint ltrW leq_card_rng_dom).
      - by move: H9; rewrite H1.
    * by hoare; auto; smt w=(RealOrder.mulr_ge0 mu_bounded ge0_q).
  + move=> c; proc; rcondt 2; 1:by auto.
    sp; if=> //=.
    * inline*;sp;if;auto; 2:smt().
      move=> &hr /> + + + + + x.
      by rewrite !fdom_set !fcardU !fcard1; smt(fcard_ge0).
    * by auto=> /#.
  + by move=> b c; proc; rcondf 2; auto.
  qed.
end section CollisionProbability.

(* We pull together the results of the first two sections *)
lemma PartialConclusion (D <: Distinguisher {PRPi, ARP, DBounder}) &m:
  (forall (O <: SPRP_Oracles {D}), islossless O.f => islossless O.fi => islossless D(O).distinguish) =>
  `|Pr[IND(PRPi'(Indirect),DBounder(D)).main() @ &m: res]
    - Pr[IND(ARP,DBounder(D)).main() @ &m: res]|
  <= (q^2 - q)%r / 2%r * mu uD (pred1 witness).
proof.
move=> D_ll.
have:= pr_PRFi_collision D D_ll &m.
have /#:= pr_PRPi'_Indirect_ARP (DBounder(D)) _ &m.
move=> O O_f_ll O_fi_ll; proc.
call (D_ll (<: DBounder(D,O).FBounder) _ _).
  by proc; sp; if=> //=; wp; call O_f_ll.
  by proc; sp; if=> //=; wp; call O_fi_ll.
by auto.
qed.

(** This section proves the equivalence between the Ideal PRP and the
    module PRPi'(Indirect) used in section Upto. **)
section PRPi_PRPi'_Indirect.
  local clone include Dexcepted.TwoStepSampling with
    type i    <- unit,
    type t    <- D,
    op   dt _ <- uD
  proof *.

  (* The key is in proving that Direct.sample and Indirect.sample
     define the same distribution. We do this by extensional equality
     of distributions:
       forall a, Pr[Direct.sample: res = a] = Pr[Indirect.sample: res = a]. *)
  equiv eq_Direct_Indirect: Direct.sample ~ Indirect.sample: ={X} ==> ={res}.
  proof.
  transitivity S.direct (X{2} = fun _=> X{1} ==> ={res}) (X{1} = fun _ => X{2} ==> ={res})=> />.
  + by move=> &2; exists ((), fun _=> X{2}).
  + by proc; rnd.
  transitivity S.indirect (={x,X} ==> ={res}) (X{1} = fun _=> X{2} ==> ={res})=> />.
  + by move=> &1 &2 ->; exists ((),fun _=> X{2}).
  + by conseq (@ll_direct_indirect_eq); smt(uD_uf_fu).
  proc. seq 1 1: (#pre /\ ={r}); auto.
  by if; auto.
  qed.

  (* The rest is easy *)
  local equiv eq_PRPi_PRPi'_f_Indirect: PRPi.f ~ PRPi'(Indirect).f:
    ={x, PRPi.m, PRPi.mi} ==> ={res, PRPi.m, PRPi.mi}.
  proof.
  transitivity PRPi'(Direct).f (={PRPi.m,PRPi.mi,x} ==> ={PRPi.m,PRPi.mi,res}) (={PRPi.m,PRPi.mi,x} ==> ={PRPi.m,PRPi.mi,res}).
  + by move=> &1 &2 [->> [->> ->>]]; exists PRPi.m{2} PRPi.mi{2} x{2}.
  + done.
  + by proc; inline *; if=> //=; auto; progress; rewrite get_setE.
  + by proc; if=> //=; wp; call eq_Direct_Indirect.
  qed.

  local equiv eq_PRPi_PRPi'_fi_Indirect: PRPi.fi ~ PRPi'(Indirect).fi:
    y{1} = x{2} /\ ={PRPi.m, PRPi.mi} ==> ={res, PRPi.m, PRPi.mi}.
  proof.
  transitivity PRPi'(Direct).fi (={PRPi.m,PRPi.mi} /\ y{1} = x{2} ==> ={PRPi.m,PRPi.mi,res}) (={PRPi.m,PRPi.mi,x} ==> ={PRPi.m,PRPi.mi,res}).
  + by move=> &1 &2 [->> [->> ->>]]; exists PRPi.m{2} PRPi.mi{2} x{2}.
  + done.
  + by proc; inline *; if=> //=; auto; progress; rewrite get_setE.
  + by proc; if=> //=; wp; call eq_Direct_Indirect.
  qed.

  declare module D <: Distinguisher {PRPi}.

  lemma pr_PRPi_PRPi'_Indirect &m:
    Pr[IND(PRPi,D).main() @ &m: res] = Pr[IND(PRPi'(Indirect),D).main() @ &m: res].
  proof.
  byequiv=> //=.
  proc.
  call (_: ={PRPi.m,PRPi.mi}).
    by apply eq_PRPi_PRPi'_f_Indirect.
    by apply eq_PRPi_PRPi'_fi_Indirect.
  by inline*; auto.
  qed.
end section PRPi_PRPi'_Indirect.

lemma Conclusion (D <: Distinguisher {PRPi, ARP, DBounder}) &m:
  (forall (O <: SPRP_Oracles {D}), islossless O.f => islossless O.fi => islossless D(O).distinguish) =>
  `|Pr[IND(PRPi,DBounder(D)).main() @ &m: res]
    - Pr[IND(ARP,DBounder(D)).main() @ &m: res]|
  <= (q^2 - q)%r / 2%r * mu uD (pred1 witness).
proof.
move=> D_ll.
by rewrite (pr_PRPi_PRPi'_Indirect (DBounder(D)) &m) (PartialConclusion D &m D_ll).
qed.
